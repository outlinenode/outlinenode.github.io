<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://outlinenode.github.io/news/article-95148.htm" />
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Java并发工具学习（八）——Semaphore和Condition</title>
        <meta name="description" content="文章目录  前言 Semaphore Condition 总结    从这一篇博客开始，开始总结线程间协作，并发流程控制的工具类，这一篇主要介绍Semaphore和Condition  Semapho" />
        <link rel="icon" href="/assets/website/img/outlinenode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Outline Node免费机场订阅节点官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://outlinenode.github.io/news/article-95148.htm" />
    <meta property="og:site_name" content="Outline Node免费机场订阅节点官网" />
    <meta property="og:title" content="Java并发工具学习（八）——Semaphore和Condition" />
    <meta property="og:image" content="https://outlinenode.github.io/uploads/20241101/874b501dd42d657842e42f26c993316a.webp" />
        <meta property="og:release_date" content="2025-04-13T07:19:48" />
    <meta property="og:updated_time" content="2025-04-13T07:19:48" />
        <meta property="og:description" content="文章目录  前言 Semaphore Condition 总结    从这一篇博客开始，开始总结线程间协作，并发流程控制的工具类，这一篇主要介绍Semaphore和Condition  Semapho" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Java并发工具学习（八）——Semaphore和Condition">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- Favicon -->
    <link rel="stylesheet" href="/assets/website/css/outlinenode/vendor/icofont.min.css" />
    <link rel="stylesheet" href="/assets/website/css/outlinenode/plugins/animate.min.css" />
    <link rel="stylesheet" href="/assets/website/css/outlinenode/plugins/swiper-bundle.min.css" />
    <link rel="stylesheet" href="/assets/website/css/outlinenode/plugins/aos.css" />
    <link rel="stylesheet" href="/assets/website/css/outlinenode/plugins/selectric.css" />
    <link rel="stylesheet" href="/assets/website/css/outlinenode/style.css" />
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-S2WVKF223J"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-S2WVKF223J');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <header class="header">
        <div id="active-sticky" class="header-bottom">
            <div class="container">
                <div class="row align-items-center">
                    <div class="col">
                        <a href="/" class="brand-logo">
                                                        <span>Outline Node</span>
                                                    </a>
                    </div>
                    <div class="col-auto"><a class="btn btn-warning btn-hover-warning d-none d-sm-inline-block d-lg-none" href="#">Analyze Your Site <i class="icofont-arrow-right"></i></a>
                        <button type="button" class="btn btn-warning offcanvas-toggler" data-bs-toggle="modal" data-bs-target="#offcanvas-modal"><span class="line"></span><span class="line"></span><span class="line"></span></button>
                        <nav class="d-none d-lg-block">
                            <ul class="main-menu text-end">
                                                                <li class="main-menu-item"><a class="main-menu-link" href="/">首页</a></li>
                                                                <li class="main-menu-item"><a class="main-menu-link" href="/free-nodes/">免费节点</a></li>
                                                                <li class="main-menu-item"><a class="main-menu-link" href="/paid-subscribe/">推荐机场</a></li>
                                                                <li class="main-menu-item"><a class="main-menu-link" href="/client.htm">客户端</a></li>
                                                                <li class="main-menu-item"><a class="main-menu-link" href="/news/">新闻资讯</a></li>
                                                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <!-- bread crumb section start -->
    <section class="bread-crumb-section"><img class="shape shape1" src="/assets/website/img/outlinenode/bread/1.png" alt="images_not_found"><img class="shape shape2" src="/assets/website/img/outlinenode/bread/2.png" alt="images_not_found">
        <div class="container">
            <div class="row">
                <div class="col-12">
                    <h1 class="title text-center">Java并发工具学习（八）——Semaphore和Condition</h1>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb justify-content-center">
                            <li class="breadcrumb-item"><a href="/">首页</a></li>
                            <li class="breadcrumb-item"><a href="/news/">新闻资讯</a></li>
                            <li class="breadcrumb-item active" aria-current="page"><span>正文</span></li>
                        </ol>
                    </nav>
                </div>
            </div>
        </div>
    </section>
    <!-- bread crumb section end -->
    <!-- faq section start -->
    <section class="faq-section my-7"> <img src="/assets/website/img/outlinenode/faq/bg.png" alt="images-not_found" class="faq-bg" />
        <div class="container mb-7">
            <div class="row mb-n7">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                  				  				  				<div id="content_views" class="markdown_views prism-dracula"> <div class="toc"> <h3>文章目录</h3> <ul> <li><a href="#_1" rel="nofollow">前言</a></li> <li><a href="#Semaphore_5" rel="nofollow">Semaphore</a></li> <li><a href="#Condition_79" rel="nofollow">Condition</a></li> <li><a href="#_232" rel="nofollow">总结</a></li> </ul> </div> </h1> <p>从这一篇博客开始，开始总结线程间协作，并发流程控制的工具类，这一篇主要介绍Semaphore和Condition</p> </h1> <p>Semaphore中文译文为信号量，操作系统中也有同样的概念。类似于生活中常见的许可证的概念。在执行指定业务逻辑之前，需要先获取相关的许可证。在限流的使用场景中也有Semaphore的影子。</p> <p><strong>在Java中，信号量的作用是维护一个"许可证"的计数，线程可以获取许可证，获取成功信号量的个数就减一，同时线程也可以释放一个许可证，释放一个信号量就加一，当信号量所拥有的许可证数量为0，那么其他想要获取许可证的线程就需要等待，直到有另外的线程释放了许可证。</strong></p> <p>在初始化Semaphore的时候，需要初始化信号量个数，同时也可以设置对应的公平策略，如果指定为公平，那么Semaphore会把之前的等待线程放入到自己维护的一个FIFO队列中，信号量的分发会根据在FIFO队列中等待的时长来进行。</p> <p>通过Semaphore获取信号量的方法有多个，大体上分为以下三类</p> <table> <thead> <tr> <th align="center">方法</th> <th align="center">作用</th> </tr> </thead> <tbody> <tr> <td align="center">acquire()<br />acquire(int permits)</td> <td align="center">获取信号量的时候阻塞，同时响应中断。这里的permits参数指的是想要获取信号量的个数</td> </tr> <tr> <td align="center">acquireUninterruptibly()<br />acquireUninterruptibly(int permits)</td> <td align="center">在获取信号量的时候不响应中断</td> </tr> <tr> <td align="center">tryAcquire()<br />tryAcquire(int permits)<br />tryAcquire(int permits, long timeout, TimeUnit unit)<br />tryAcquire(long timeout, TimeUnit unit)</td> <td align="center">尝试获取信号量，如果没有则不阻塞，可以指定获取信号量的时间</td> </tr> </tbody> </table> <p>如果执行完逻辑，可以调用release来释放信号量</p> <p>简单实例</p> <pre><code class="prism language-java"><span class="token comment">/**  * autor:liman  * createtime:2021/11/28  * comment:多个线程等待许可证  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SemaphoreDemo01</span> <span class="token punctuation">{<!-- --></span>      <span class="token keyword">static</span> <span class="token class-name">Semaphore</span> semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3个许可证，公平模式</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment">//判断线程池是否停止</span>         executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>executorService<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             <span class="token comment">//线程池没有执行完成任务，主线程就空转，直到线程池运行结束</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>      <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{<!-- --></span>          <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span>                 semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//获取多个信号量</span>                 <span class="token comment">//semaphore.acquire(3);</span>             <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"拿到了许可证"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span>                 <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//释放多个信号量</span>             <span class="token comment">//semaphore.release(3);</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"释放了许可证"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>信号量的获取个数可以灵活指定，这在一定程度上可以根据线程耗费资源的程度进行侧重，比如有两个任务，一个是TaskA ，一个是TaskB，TaskA的执行需要耗费较多的资源，TaskB需要耗费较少的资源，我们可以定义3个信号量。执行TaskA需要获取全部信号量才能执行，而执行TaskB只需要获取一个信号量，这样TaskA和TaskB就永远不可能同时执行。</p> <p>信号量需要注意的是，在获取和释放的时候，数量必须要保证一致，每次获取多少信号量就要释放多少信号量，如果某个线程获取了2个信号量，但是释放的时候，只释放了1个，随着时间的推移，总会有一个时间点，其他线程的信号量不够用了，这样会导致程序卡死。</p> <p>信号量的获取和释放，可以不在同一个线程中执行，也许是线程A获取了3个信号量，线程B释放了3个信号量，这也是可行的，但要保证逻辑合理。</p> </h1> <p>Condition是一个接口，其通过ReentrantLock创建，其作用非常类似于Object中的wait和notify的组合，在Conditon中变成了await和signal。关于wait和notify这两者可以参考之前的博客Thread和Object中的方法。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221230/9f9fa3b6c9e4a19c10b2916c49d8a8ec.jpg" alt="Java并发工具学习（八）——Semaphore和Condition"></p> <p>简单基本实例</p> <pre><code class="prism language-java"><span class="token comment">/**  * autor:liman  * createtime:2021/11/28  * comment:普通的condition用法实例  */</span> <span class="token annotation punctuation">@Slf4j</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConditionDemo</span> <span class="token punctuation">{<!-- --></span>      <span class="token keyword">private</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//condition由锁来实例化</span>     <span class="token keyword">private</span> <span class="token class-name">Condition</span> condition <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">try</span><span class="token punctuation">{<!-- --></span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"条件不满足，进入await"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//这里</span>             condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"条件满足，开始继续执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{<!-- --></span>             lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">try</span><span class="token punctuation">{<!-- --></span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"准备工作完成，唤醒其他线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             condition<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{<!-- --></span>             lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token class-name">ConditionDemo</span> conditionDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConditionDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{<!-- --></span>             <span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span>                 <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 conditionDemo<span class="token punctuation">.</span><span class="token function">method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//唤醒在condition上等待的线程</span>             <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//主线程调用method01先行阻塞，在1秒之后，被上面新建的线程唤醒</span>         conditionDemo<span class="token punctuation">.</span><span class="token function">method01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p><strong>与notify相对应的，Condition也存在signal和signalAll两个方法，其中signalAll会唤醒Condition上等待的所有线程，而signal是公平的，只会唤醒等待时间最长的线程。</strong></p> <p>利用Condition实现的生产者消费者模式</p> <pre><code class="prism language-java"><span class="token comment">/**  * autor:liman  * createtime:2021/11/28  * comment:condition实现生产者和消费者  */</span> <span class="token annotation punctuation">@Slf4j</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConditionProducerAndCustomer</span> <span class="token punctuation">{<!-- --></span>      <span class="token keyword">private</span> <span class="token keyword">int</span> queueSize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>queueSize<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token class-name">Condition</span> notFull <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token class-name">Condition</span> notEmpty <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{<!-- --></span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>          <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//消费者一直消费</span>                 lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">try</span><span class="token punctuation">{<!-- --></span>                     <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列为空，消费者进入等待"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span>                             notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用notEmpty进行等待</span>                         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>                             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token punctuation">}</span>                     <span class="token punctuation">}</span>                     queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     notFull<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取出数据，同志爱生产者继续生产</span>                     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从队列取走了一个数据，队列剩余"</span><span class="token operator">+</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"个数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{<!-- --></span>                     lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>      <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{<!-- --></span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>          <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//生产者一直生产</span>                 lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">try</span><span class="token punctuation">{<!-- --></span>                     <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> queueSize<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列已满，生产者进入等待"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span>                             notFull<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用 notFull 进行等待</span>                         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>                             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token punctuation">}</span>                     <span class="token punctuation">}</span>                     queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     notEmpty<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取出数据，同志爱生产者继续生产</span>                     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产者向消费者插入了一个数据，队列剩余"</span><span class="token operator">+</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"个数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{<!-- --></span>                     lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token class-name">ConditionProducerAndCustomer</span> conditionProducerAndCustomer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConditionProducerAndCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Producer</span> producer <span class="token operator">=</span> conditionProducerAndCustomer<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Customer</span> customer <span class="token operator">=</span> conditionProducerAndCustomer<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         customer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>如果说Lock是用来替代synchronized关键字的，那么Condition其实可以理解为用来替代Object.wati/notify的，在用法和性质上，二者几乎没有区别。</p> <p><strong>await方法会释放lock的锁，和Object.wait一样，不需要自己手动先行释放</strong></p> <p><strong>调用await的时候，也必须要持有lock锁，否则会出现异常</strong>（虽然编译的时候不会出现异常）</p> </h1> <p>简单总结了一下Semaphore和Condition，下一篇总结一下CountDownLatch和CyclicBarrier</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-95147.htm">微信小程序自定义顶部导航栏封装</a></p>
                                        <p>下一个：<a href="/news/article-95900.htm">中国宠物用品生产基地在哪里有（宠物用品厂家哪个城市最多）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-81289.htm" title="免费领养宠物交易平台有哪些的简单介绍">免费领养宠物交易平台有哪些的简单介绍</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-6-free-node-subscribe.htm" title="4月6日→22.9M/S|2025年最新免费节点Outline Node订阅链接地址">4月6日→22.9M/S|2025年最新免费节点Outline Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-66598.htm" title="DDL(数据定义语言)">DDL(数据定义语言)</a></li>
                        <li class="py-2"><a href="/news/article-92854.htm" title="猫咪打疫苗一共几针?多少钱一针（猫一般打疫苗多少钱一针）">猫咪打疫苗一共几针?多少钱一针（猫一般打疫苗多少钱一针）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-31-free-high-speed-nodes.htm" title="3月31日→22.9M/S|2025年最新免费节点Outline Node订阅链接地址">3月31日→22.9M/S|2025年最新免费节点Outline Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-68537.htm" title="兽用疫苗回温器使用说明（兽用疫苗回温器使用说明图片）">兽用疫苗回温器使用说明（兽用疫苗回温器使用说明图片）</a></li>
                        <li class="py-2"><a href="/news/article-86962.htm" title="延吉市动物卫生检疫站电话（延吉市动物防疫站咨询电话）">延吉市动物卫生检疫站电话（延吉市动物防疫站咨询电话）</a></li>
                        <li class="py-2"><a href="/news/article-75117.htm" title="vue跳转方式及传参 (包括打开新窗口)">vue跳转方式及传参 (包括打开新窗口)</a></li>
                        <li class="py-2"><a href="/news/article-90603.htm" title="Eureka包含两个组件：Eureka Server 和 Eureka Client">Eureka包含两个组件：Eureka Server 和 Eureka Client</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-14-free-subscribe-node.htm" title="3月14日→19.6M/S|2025年最新免费节点Outline Node订阅链接地址">3月14日→19.6M/S|2025年最新免费节点Outline Node订阅链接地址</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">48</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">90</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!-- faq team section end -->
    <!-- blog section end -->
        <footer class="footer-section position-relative">
        <!-- coppy right satrt -->
        <div class="copy-right-section">
            <div class="container">
                <div class="row">
                    <div class="col-12">
                                            <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                        <p>
                            <a href="/">Outline Node免费机场订阅节点官网</a> 版权所有 Powered by WordPress
                        </p>
                    </div>
                </div>
            </div>
        </div>
        <!-- coppy right end -->
    </footer>
    <!-- Scripts -->
    <script src="/assets/website/js/frontend/outlinenode/vendor/vendor.min.js"></script>
    <script src="/assets/website/js/frontend/outlinenode/plugins/plugins.min.js"></script>
    <script src="/assets/website/js/frontend/outlinenode/ajax-contact.js"></script>
    <script src="/assets/website/js/frontend/outlinenode/plugins/aos.js"></script>
    <script src="/assets/website/js/frontend/outlinenode/plugins/waypoints.js"></script>
    <script src="/assets/website/js/frontend/outlinenode/plugins/jquery.selectric.min.js"></script>
    <script src="/assets/website/js/frontend/outlinenode/main.min.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>