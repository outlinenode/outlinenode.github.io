<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://outlinenode.github.io/news/article-60564.htm" />
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Go 语言入门之net/url 包_Golang</title>
        <meta name="description" content="目录  引言 URL 格式 Go url 包函数使用格式 如何使用 URL 包 在 Golang 中对查询字符串进行 URL 编码 在 Golang 中对多个查询参数进行 URL 编码 在 Golan" />
        <link rel="icon" href="/assets/website/img/outlinenode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Outline Node免费机场订阅节点官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://outlinenode.github.io/news/article-60564.htm" />
    <meta property="og:site_name" content="Outline Node免费机场订阅节点官网" />
    <meta property="og:title" content="Go 语言入门之net/url 包_Golang" />
    <meta property="og:image" content="https://outlinenode.github.io/uploads/20241101/e58f624b4795766a7fbb4fa570a6ec3e.webp" />
        <meta property="og:release_date" content="2025-02-21T09:21:37" />
    <meta property="og:updated_time" content="2025-02-21T09:21:37" />
        <meta property="og:description" content="目录  引言 URL 格式 Go url 包函数使用格式 如何使用 URL 包 在 Golang 中对查询字符串进行 URL 编码 在 Golang 中对多个查询参数进行 URL 编码 在 Golan" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Go 语言入门之net/url 包_Golang">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- Favicon -->
    <link rel="stylesheet" href="/assets/website/css/outlinenode/vendor/icofont.min.css" />
    <link rel="stylesheet" href="/assets/website/css/outlinenode/plugins/animate.min.css" />
    <link rel="stylesheet" href="/assets/website/css/outlinenode/plugins/swiper-bundle.min.css" />
    <link rel="stylesheet" href="/assets/website/css/outlinenode/plugins/aos.css" />
    <link rel="stylesheet" href="/assets/website/css/outlinenode/plugins/selectric.css" />
    <link rel="stylesheet" href="/assets/website/css/outlinenode/style.css" />
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-S2WVKF223J"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-S2WVKF223J');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <header class="header">
        <div id="active-sticky" class="header-bottom">
            <div class="container">
                <div class="row align-items-center">
                    <div class="col">
                        <a href="/" class="brand-logo">
                                                        <span>Outline Node</span>
                                                    </a>
                    </div>
                    <div class="col-auto"><a class="btn btn-warning btn-hover-warning d-none d-sm-inline-block d-lg-none" href="#">Analyze Your Site <i class="icofont-arrow-right"></i></a>
                        <button type="button" class="btn btn-warning offcanvas-toggler" data-bs-toggle="modal" data-bs-target="#offcanvas-modal"><span class="line"></span><span class="line"></span><span class="line"></span></button>
                        <nav class="d-none d-lg-block">
                            <ul class="main-menu text-end">
                                                                <li class="main-menu-item"><a class="main-menu-link" href="/">首页</a></li>
                                                                <li class="main-menu-item"><a class="main-menu-link" href="/free-nodes/">免费节点</a></li>
                                                                <li class="main-menu-item"><a class="main-menu-link" href="/paid-subscribe/">推荐机场</a></li>
                                                                <li class="main-menu-item"><a class="main-menu-link" href="/client.htm">客户端</a></li>
                                                                <li class="main-menu-item"><a class="main-menu-link" href="/news/">新闻资讯</a></li>
                                                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <!-- bread crumb section start -->
    <section class="bread-crumb-section"><img class="shape shape1" src="/assets/website/img/outlinenode/bread/1.png" alt="images_not_found"><img class="shape shape2" src="/assets/website/img/outlinenode/bread/2.png" alt="images_not_found">
        <div class="container">
            <div class="row">
                <div class="col-12">
                    <h1 class="title text-center">Go 语言入门之net/url 包_Golang</h1>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb justify-content-center">
                            <li class="breadcrumb-item"><a href="/">首页</a></li>
                            <li class="breadcrumb-item"><a href="/news/">新闻资讯</a></li>
                            <li class="breadcrumb-item active" aria-current="page"><span>正文</span></li>
                        </ol>
                    </nav>
                </div>
            </div>
        </div>
    </section>
    <!-- bread crumb section end -->
    <!-- faq section start -->
    <section class="faq-section my-7"> <img src="/assets/website/img/outlinenode/faq/bg.png" alt="images-not_found" class="faq-bg" />
        <div class="container mb-7">
            <div class="row mb-n7">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                  				  				  				<div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li><a href="#_label0" rel="nofollow">引言</a></li> <li><a href="#_label1" rel="nofollow">URL 格式</a></li> <li><a href="#_label2" rel="nofollow">Go url 包函数使用格式</a></li> <li><a href="#_label3" rel="nofollow">如何使用 URL 包</a></li> <li><a href="#_label4" rel="nofollow">在 Golang 中对查询字符串进行 URL 编码</a></li> <li><a href="#_label5" rel="nofollow">在 Golang 中对多个查询参数进行 URL 编码</a></li> <li><a href="#_label6" rel="nofollow">在 Golang 中对路径段进行 URL 编码</a></li> <li><a href="#_label7" rel="nofollow">通过对各个部分进行编码来构建完整的 URL</a></li> <li><a href="#_label8" rel="nofollow">在 Golang 中解析 URL</a></li> <li><a href="#_label9" rel="nofollow">处理相对路径</a></li> <li><a href="#_label10" rel="nofollow">解析空格</a></li> <li><a href="#_label11" rel="nofollow">判断绝对地址</a></li> <li><a href="#_label12" rel="nofollow">解析端口</a></li> </ul> </div> <p class="maodian"><a name="_label0" rel="nofollow"></a></p> <h2>引言</h2> <p>在 Golang 中，将 URL 打包用于从服务器获取数据非常重要。只需了解您是否正在处理任何应用程序并且您想从任何外部位置或服务器获取此应用程序的数据，都需要我们可以使用 URL。</p> <p class="maodian"><a name="_label1" rel="nofollow"></a></p> <h2>URL 格式</h2> <p>URL 包含各种参数：例如 端口、URL 中的搜索字符串等。 URL 可以包含各种方法，允许它处理 URL 属性和进行修改，例如，如果我们有一个类似的 URL <code>www.exmple.com:3000</code> ，3000 是 URL 的端口，借助 <code>net/url</code> 中的封装函数我们可以访问端口号，同理，还可以检查 URL 格式是否有效。</p> <p><strong>先来看一下常见 URL 的格式：</strong></p> <blockquote> <p>&lt;schema&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;path&gt;:&lt;params&gt;?&lt;query&gt;#&lt;frag&gt;</p> </blockquote> <ul> <li> <code>scheme</code> : 方案是如何访问指定资源的主要标识符，他会告诉负责解析 <code>URL</code> 应用程序应该使用什么协议；</li> <li> <code>user</code> ：用户名；</li> <li> <code>password</code> ：密码；</li> <li> <code>host</code> : 主机组件标识了因特网上能够访问资源的宿主机器，可以有主机名或者是 <code>IP</code> 地址来表示；</li> <li> <code>port</code> : 端口标识了服务器正在监听的网络端口。默认端口号是 80；</li> <li> <code>path</code> : <code>URL</code> 的路径组件说明了资源位于服务器的什么地方；</li> <li> <code>params</code> : <code>URL</code> 中通过协议参数来访问资源，比名值对列表，分号分割来进行访问；</li> <li> <code>query</code> : 字符串是通过提问问题或进行查询来缩小请求资源类的范围；</li> <li> <code>frag</code> : 为了引用部分资源或资源的一个片段，比如 <code>URL</code> 指定 <code>HTML</code> 文档中一个图片或一个小节；</li> </ul> <p><code>HTTP</code> 通常只处理整个对象，而不是对象的片段，客户端不能将片段传送给服务器。浏览器从服务器获取整个资源之后，会根据片段来显示你感兴趣的片段部分。</p> <p><strong>对应 Go 中 URL 的结构体：</strong></p> <div class="ay1code"> <pre class="brush:go;">type URL struct {      Scheme      string      Opaque      string    // encoded opaque data      User        *Userinfo // username and password information      Host        string    // host or host:port      Path        string    // path (relative paths may omit leading slash)      RawPath     string    // encoded path hint (see EscapedPath method)      ForceQuery  bool      // append a query ('?') even if RawQuery is empty      RawQuery    string    // encoded query values, without '?'      Fragment    string    // fragment for references, without '#'      RawFragment string    // encoded fragment hint (see EscapedFragment method)  }</pre> </div> <p class="maodian"><a name="_label2" rel="nofollow"></a></p> <h2>Go url 包函数使用格式</h2> <p>Go 的 <code>net/url</code> 提供了众多处理 URL 的内置函数，<strong>这些函数的使用格式如下：</strong></p> <blockquote> <p>URL, error := url.inbuilt-function-name("url")</p> </blockquote> <ul> <li> <strong>URL：</strong>这包含 URL 名称和 URL 的一些基本细节。我们可以给它起任何名字。它就像任何变量一样。</li> <li> <strong>error: </strong>这是 error 部分，以防 URL 错误或出现任何异常，在这种情况下 URL 将返回错误，并且该 error 将在 error 部分中捕获。</li> <li> <strong>inbuilt-function-name：</strong>正如我们所讨论的，URL 包中有许多函数可以处理 URL，例如 <code>Parse</code>、<code>Path</code>、<code>Rawpath</code>、<code>string()</code> 所有这些函数我们可以用于不同的目的。</li> </ul> <p class="maodian"><a name="_label3" rel="nofollow"></a></p> <h2>如何使用 URL 包</h2> <p>在了解 <code>url</code> 包的工作原理之前我们需要了解基本的使用。当我们点击任何 <code>url</code> 时，它可以包含许多属性，比如它可以有一些端口、它可以有一些搜索、它可以有一些路径等，所以我们使用 URL 来操作和处理所有这些东西。让我们了解一下 go 语言中 <code>URL</code> 包 的工作原理。</p> <div class="ay1code"> <pre class="brush:go;">package main  import (  "fmt"  "log"  "net/url"  )  func TestURL() {  URL, err := url.Parse("https://www.baidu.com/s?wd=golang")  fmt.Println("Url before modification is", URL)  if err != nil {  log.Fatal("An error occurs while handling url", err)  }  URL.Scheme = "https"  URL.Host = "bing.com"  query := URL.Query()  query.Set("q", "go")  URL.RawQuery = query.Encode()  fmt.Println("The url after modification is", URL)  }  func main() {  TestURL()  }</pre> </div> <p><strong>运行结果：</strong></p> <blockquote> <p>$ go run main.go<br />Url before modification is https://www.baidu.com/s?wd=golang<br />The url after modification is https://bing.com/s?q=go&amp;wd=golang</p> </blockquote> <p class="maodian"><a name="_label4" rel="nofollow"></a></p> <h2>在 Golang 中对查询字符串进行 URL 编码</h2> <p>Go 的 <code>net/url</code> 包包含一个名为 <code>QueryEscape</code> 的内置方法，用于对字符串进行转义/编码，以便可以安全地将其放置在 URL 查询中。以下示例演示了如何在 Golang 中对查询字符串进行编码:</p> <div class="ay1code"> <pre class="brush:go;">package main  import (  "fmt"  "net/url"  )  func main() {  query := "Hello World"  fmt.Println(url.QueryEscape(query))  }</pre> </div> <p><strong>运行结果：</strong></p> <blockquote> <p>$ go run main.go<br />Hello+World</p> </blockquote> <p class="maodian"><a name="_label5" rel="nofollow"></a></p> <h2>在 Golang 中对多个查询参数进行 URL 编码</h2> <p>如果您想一次编码多个查询参数，那么您可以创建一个 <code>url.Values</code> 结构，其中包含查询参数到值的映射，并使用 <code>url.Values.Encode()</code> 方法对所有查询参数进行编码。</p> <div class="ay1code"> <pre class="brush:go;">package main  import (  "fmt"  "net/url"  )  func main() {  params := url.Values{}  params.Add("name", "@Wade")  params.Add("phone", "+111111111111")  fmt.Println(params.Encode())  }</pre> </div> <p><strong>运行代码：</strong></p> <blockquote> <p>$ go run main.go<br />name=%40Wade&amp;phone=%2B111111111111</p> </blockquote> <p class="maodian"><a name="_label6" rel="nofollow"></a></p> <h2>在 Golang 中对路径段进行 URL 编码</h2> <p>就像 <code>QueryEscape</code> 一样，Go 中的 <code>net/url</code> 包有另一个名为 <code>PathEscape()</code> 的函数来对字符串进行编码，以便它可以安全地放置在 URL 的路径段中:</p> <div class="ay1code"> <pre class="brush:go;">package main  import (  "fmt"  "net/url"  )  func main() {  path := "path with?reserved+characters"  fmt.Println(url.PathEscape(path))  }</pre> </div> <p><strong>运行结果：</strong></p> <blockquote> <p>$ go run main.go<br />path%20with%3Freserved+characters</p> </blockquote> <p class="maodian"><a name="_label7" rel="nofollow"></a></p> <h2>通过对各个部分进行编码来构建完整的 URL</h2> <p>最后，我们来看一个完整的 Golang 中 URL 解析和 URL 编码的例子：</p> <div class="ay1code"> <pre class="brush:go;">package main  import (  "fmt"  "net/url"  )  func main() {  // Let's start with a base url  baseUrl, err := url.Parse("http://www.bing.com")  if err != nil {  fmt.Println("Malformed URL: ", err.Error())  return  }  // Add a Path Segment (Path segment is automatically escaped)  baseUrl.Path += "path with?reserved characters"  // Prepare Query Parameters  params := url.Values{}  params.Add("q", "Hello World")  params.Add("u", "@wade")  // Add Query Parameters to the URL  baseUrl.RawQuery = params.Encode() // Escape Query Parameters  fmt.Printf("Encoded URL is %q\n", baseUrl.String())  }</pre> </div> <p><strong>运行代码：</strong></p> <blockquote> <p>$ go run main.go<br />Encoded URL is "http://www.bing.com/path%20with%3Freserved%20characters?q=Hello+World&amp;u=%40wade"</p> </blockquote> <p class="maodian"><a name="_label8" rel="nofollow"></a></p> <h2>在 Golang 中解析 URL</h2> <div class="ay1code"> <pre class="brush:go;">package main  import (  "fmt"  "log"  "net/url"  )  func TestURL() {  URL, err := url.Parse("http://bing.com/good%2bad")  fmt.Println("Url before modification is", URL)  if err != nil {  log.Fatal("An error occurs while handling url", err)  }  fmt.Println("The URL path is", URL.Path)  fmt.Println("The URL raw path is", URL.RawPath)  fmt.Println("The URL is ", URL.String())  }  func main() {  TestURL()  }</pre> </div> <p><strong>运行代码：</strong></p> <blockquote> <p>$ go run main.go<br />Url before modification is http://bing.com/good%2bad<br />The URL path is /good+ad<br />The URL raw path is /good%2bad<br />The URL is http://bing.com/good%2bad</p> </blockquote> <p class="maodian"><a name="_label9" rel="nofollow"></a></p> <h2>处理相对路径</h2> <div class="ay1code"> <pre class="brush:go;">package main  import (  "fmt"  "log"  "net/url"  )  func ExampleURL() {  URL, error := url.Parse("../../..//search?q=php")  fmt.Println("Url before modification is", URL)  if error != nil {  log.Fatal("An error occurs while handling url", error)  }  baseURL, err := url.Parse("http://example.com/directory/")  if err != nil {  log.Fatal("An error occurs while handling url", err)  }  fmt.Println(baseURL.ResolveReference(URL))  }  func main() {  ExampleURL()  }</pre> </div> <blockquote> <p>$ go run main.go<br />Url before modification is ../../..//search?q=php<br />http://example.com/search?q=php</p> </blockquote> <p class="maodian"><a name="_label10" rel="nofollow"></a></p> <h2>解析空格</h2> <div class="ay1code"> <pre class="brush:go;">package main  import (  "fmt"  "log"  "net/url"  )  func ExampleURL() {  URL, error := url.Parse("http://example.com/Here path with space")  if error != nil {  log.Fatal("An error occurs while handling url", error)  }  fmt.Println("The Url is", URL)  }  func main() {  ExampleURL()  }</pre> </div> <p><strong>运行结果：</strong></p> <blockquote> <p>$ go run main.go<br />The Url is http://example.com/Here%20path%20with%20space</p> </blockquote> <p class="maodian"><a name="_label11" rel="nofollow"></a></p> <h2>判断绝对地址</h2> <div class="ay1code"> <pre class="brush:go;">package main  import (  "fmt"  "net/url"  )  func main() {  u := url.URL{Host: "example.com", Path: "foo"}  fmt.Println("The Url is", u.IsAbs())  u.Scheme = "http"  fmt.Println("The Url is", u.IsAbs())  }</pre> </div> <blockquote> <p>$ go run main.go<br />The Url is false<br />The Url is true</p> </blockquote> <p class="maodian"><a name="_label12" rel="nofollow"></a></p> <h2>解析端口</h2> <div class="ay1code"> <pre class="brush:go;">package main  import (  "fmt"  "log"  "net/url"  )  func ExampleURL() {  URL1, error := url.Parse("https://example.org")  fmt.Println("URL1 before modification is", URL1)  if error != nil {  log.Fatal("An error occurs while handling url", error)  }  URL2, err := url.Parse("https://example.org:8080")  if err != nil {  log.Fatal("An error occurs while handling url", URL2)  }  fmt.Println("URL2 before modification is", URL2)  fmt.Println("URL2 Port number is", URL2.Port())  }  func main() {  ExampleURL()  }</pre> </div> <blockquote> <p>$ go run main.go<br />URL1 before modification is https://example.org<br />URL2 before modification is https://example.org:8080<br />URL2 Port number is 8080</p> </blockquote> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-59957.htm">动物疫苗价格排行榜前十的有哪些种类图片及价格（动物疫苗排名）</a></p>
                                        <p>下一个：<a href="/news/article-60565.htm">国内宠物粮食十大厂家有哪些呢（国内宠物粮生产厂家）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-35739.htm" title="宠物领养协议文案怎么写好 宠物领养协议文案怎么写好呢">宠物领养协议文案怎么写好 宠物领养协议文案怎么写好呢</a></li>
                        <li class="py-2"><a href="/news/article-27674.htm" title="动物注射疫苗应注意什么细节问题（动物疫苗接种时应注意哪些）">动物注射疫苗应注意什么细节问题（动物疫苗接种时应注意哪些）</a></li>
                        <li class="py-2"><a href="/news/article-39135.htm" title="Python 查找算法_众里寻他千百度，蓦然回首那人却在灯火阑珊处（线性、二分，分块、插值查找算法)">Python 查找算法_众里寻他千百度，蓦然回首那人却在灯火阑珊处（线性、二分，分块、插值查找算法)</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-22-free-high-speed-nodes.htm" title="1月22日→19.3M/S|2025年最新免费节点Outline Node订阅链接地址">1月22日→19.3M/S|2025年最新免费节点Outline Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-59957.htm" title="动物疫苗价格排行榜前十的有哪些种类图片及价格（动物疫苗排名）">动物疫苗价格排行榜前十的有哪些种类图片及价格（动物疫苗排名）</a></li>
                        <li class="py-2"><a href="/news/article-42630.htm" title="宠物粮食原料（宠物粮食原料有哪些）">宠物粮食原料（宠物粮食原料有哪些）</a></li>
                        <li class="py-2"><a href="/news/article-26298.htm" title="tf.reshape(tensor, shape, name=None)改变tensor的形状">tf.reshape(tensor, shape, name=None)改变tensor的形状</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-14-node-share.htm" title="12月14日→19.2M/S|2024年最新免费节点Outline Node订阅链接地址">12月14日→19.2M/S|2024年最新免费节点Outline Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-31-free-node-subscribe.htm" title="12月31日→19.2M/S|2025年最新免费节点Outline Node订阅链接地址">12月31日→19.2M/S|2025年最新免费节点Outline Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-38657.htm" title="Redis Cluster 集群搭建与扩容、缩容">Redis Cluster 集群搭建与扩容、缩容</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">69</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">92</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!-- faq team section end -->
    <!-- blog section end -->
        <footer class="footer-section position-relative">
        <!-- coppy right satrt -->
        <div class="copy-right-section">
            <div class="container">
                <div class="row">
                    <div class="col-12">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                        <p>
                            <a href="/">Outline Node免费机场订阅节点官网</a> 版权所有 Powered by WordPress
                        </p>
                    </div>
                </div>
            </div>
        </div>
        <!-- coppy right end -->
    </footer>
    <!-- Scripts -->
    <script src="/assets/website/js/frontend/outlinenode/vendor/vendor.min.js"></script>
    <script src="/assets/website/js/frontend/outlinenode/plugins/plugins.min.js"></script>
    <script src="/assets/website/js/frontend/outlinenode/ajax-contact.js"></script>
    <script src="/assets/website/js/frontend/outlinenode/plugins/aos.js"></script>
    <script src="/assets/website/js/frontend/outlinenode/plugins/waypoints.js"></script>
    <script src="/assets/website/js/frontend/outlinenode/plugins/jquery.selectric.min.js"></script>
    <script src="/assets/website/js/frontend/outlinenode/main.min.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>