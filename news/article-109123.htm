<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://outlinenode.github.io/news/article-109123.htm" />
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>通过 SingleFlight 模式学习 Go 并发编程</title>
        <meta name="description" content="最近接触到微服务框架go-zero，翻看了整个框架代码，发现结构清晰、代码简洁，所以决定阅读源码学习下，本次阅读的源码位于core/syncx/singleflight.go。 在go-zero中Si" />
        <link rel="icon" href="/assets/website/img/outlinenode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Outline Node免费机场订阅节点官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://outlinenode.github.io/news/article-109123.htm" />
    <meta property="og:site_name" content="Outline Node免费机场订阅节点官网" />
    <meta property="og:title" content="通过 SingleFlight 模式学习 Go 并发编程" />
    <meta property="og:image" content="https://outlinenode.github.io/uploads/20241101/6c42afb90d886f5e4569705f53417e51.webp" />
        <meta property="og:release_date" content="2025-05-01T09:04:18" />
    <meta property="og:updated_time" content="2025-05-01T09:04:18" />
        <meta property="og:description" content="最近接触到微服务框架go-zero，翻看了整个框架代码，发现结构清晰、代码简洁，所以决定阅读源码学习下，本次阅读的源码位于core/syncx/singleflight.go。 在go-zero中Si" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="通过 SingleFlight 模式学习 Go 并发编程">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- Favicon -->
    <link rel="stylesheet" href="/assets/website/css/outlinenode/vendor/icofont.min.css" />
    <link rel="stylesheet" href="/assets/website/css/outlinenode/plugins/animate.min.css" />
    <link rel="stylesheet" href="/assets/website/css/outlinenode/plugins/swiper-bundle.min.css" />
    <link rel="stylesheet" href="/assets/website/css/outlinenode/plugins/aos.css" />
    <link rel="stylesheet" href="/assets/website/css/outlinenode/plugins/selectric.css" />
    <link rel="stylesheet" href="/assets/website/css/outlinenode/style.css" />
    <link rel="stylesheet" href="/assets/website/css/G.css" />
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-S2WVKF223J"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-S2WVKF223J');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <header class="header">
        <div id="active-sticky" class="header-bottom">
            <div class="container">
                <div class="row align-items-center">
                    <div class="col">
                        <a href="/" class="brand-logo">
                                                        <span>Outline Node</span>
                                                    </a>
                    </div>
                    <div class="col-auto"><a class="btn btn-warning btn-hover-warning d-none d-sm-inline-block d-lg-none" href="#">Analyze Your Site <i class="icofont-arrow-right"></i></a>
                        <button type="button" class="btn btn-warning offcanvas-toggler" data-bs-toggle="modal" data-bs-target="#offcanvas-modal"><span class="line"></span><span class="line"></span><span class="line"></span></button>
                        <nav class="d-none d-lg-block">
                            <ul class="main-menu text-end">
                                                                <li class="main-menu-item"><a class="main-menu-link" href="/">首页</a></li>
                                                                <li class="main-menu-item"><a class="main-menu-link" href="/free-nodes/">免费节点</a></li>
                                                                <li class="main-menu-item"><a class="main-menu-link" href="/paid-subscribe/">推荐机场</a></li>
                                                                <li class="main-menu-item"><a class="main-menu-link" href="/client.htm">客户端</a></li>
                                                                <li class="main-menu-item"><a class="main-menu-link" href="/news/">新闻资讯</a></li>
                                                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <!-- bread crumb section start -->
    <section class="bread-crumb-section"><img class="shape shape1" src="/assets/website/img/outlinenode/bread/1.png" alt="images_not_found"><img class="shape shape2" src="/assets/website/img/outlinenode/bread/2.png" alt="images_not_found">
        <div class="container">
            <div class="row">
                <div class="col-12">
                    <h1 class="title text-center">通过 SingleFlight 模式学习 Go 并发编程</h1>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb justify-content-center">
                            <li class="breadcrumb-item"><a href="/">首页</a></li>
                            <li class="breadcrumb-item"><a href="/news/">新闻资讯</a></li>
                            <li class="breadcrumb-item active" aria-current="page"><span>正文</span></li>
                        </ol>
                    </nav>
                </div>
            </div>
        </div>
    </section>
    <!-- bread crumb section end -->
    <!-- faq section start -->
    <section class="faq-section my-7"> <img src="/assets/website/img/outlinenode/faq/bg.png" alt="images-not_found" class="faq-bg" />
        <div class="container mb-7">
            <div class="row mb-n7">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                <div class="xcblog-blog-detail xcblog-blog-detail-defined">
                      				  				  				<p>最近接触到微服务框架<code>go-zero</code>，翻看了整个框架代码，发现结构清晰、代码简洁，所以决定阅读源码学习下，本次阅读的源码位于<code>core/syncx/singleflight.go</code>。</p> <p>在<code>go-zero</code>中<code>SingleFlight</code>的作用是：<strong>将并发请求合并成一个请求，以减少对下层服务的压力。</strong></p> <h2 id="应用场景">应用场景</h2> <ol> <li>查询缓存时，合并请求，提升服务性能。<br /> 假设有一个 IP 查询的服务，每次用户请求先在缓存中查询一个 IP 的归属地，如果缓存中有结果则直接返回，不存在则进行 IP 解析操作。</li> </ol> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/171d3b8b270132c88565a935e6a4643f.jpg" alt="通过 SingleFlight 模式学习 Go 并发编程"></p> <p>如上图所示，n 个用户请求查询同一个 IP（8.8.8.8）就会对应 n 个 Redis 的查询，在高并发场景下，如果能将 n 个 Redis 查询合并成一个 Redis 查询，那么性能肯定会提升很多，而<code>SingleFlight</code>就是用来实现请求合并的，效果如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/18abbec1780640f5af3594b27f9100cf.jpg" alt="通过 SingleFlight 模式学习 Go 并发编程"></p> <ol> <li>防止缓存击穿。</li> </ol> <blockquote> <p>缓存击穿问题是指：在高并发的场景中，大量的请求同时查询一个 key ，如果这个 key 正好过期失效了，就会导致大量的请求都打到数据库，导致数据库的连接增多，负载上升。</p> </blockquote> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/ff1e68b4962cd886602bf7579d104a1f.jpg" alt="通过 SingleFlight 模式学习 Go 并发编程"></p> <p>通过<code>SingleFlight</code>可以将对同一个Key的并发请求进行合并，只让其中一个请求到数据库进行查询，其他请求共享同一个结果，可以很大程度提升并发能力。</p> <h2 id="应用方式">应用方式</h2> <p>直接上代码：</p> <pre><code class="language-go">func main() {   round := 10   var wg sync.WaitGroup   barrier := syncx.NewSingleFlight()   wg.Add(round)   for i := 0; i &lt; round; i++ {     go func() {       defer wg.Done()       // 启用10个协程模拟获取缓存操作       val, err := barrier.Do("get_rand_int", func() (interface{}, error) {         time.Sleep(time.Second)         return rand.Int(), nil       })       if err != nil {         fmt.Println(err)       } else {         fmt.Println(val)       }     }()   }   wg.Wait() }</code></pre> <p>以上代码，模拟 10 个协程请求 Redis 获取一个 key 的内容，代码很简单，就是执行<code>Do()</code>方法。其中，接收两个参数，第一个参数是获取资源的标识，可以是 redis 中缓存的 key，第二个参数就是一个匿名函数，封装好要做的业务逻辑。最终获得的结果如下：</p> <pre><code class="language-shell">5577006791947779410 5577006791947779410 5577006791947779410 5577006791947779410 5577006791947779410 5577006791947779410 5577006791947779410 5577006791947779410 5577006791947779410 5577006791947779410</code></pre> <p>从上看出，10个协程都获得了同一个结果，也就是只有一个协程真正执行了<code>rand.Int()</code>获取了随机数，其他的协程都共享了这个结果。</p> <h2 id="源码解析">源码解析</h2> <p>先看代码结构：</p> <pre><code class="language-go">type (   // 定义接口，有2个方法 Do 和 DoEx，其实逻辑是一样的，DoEx 多了一个标识，主要看Do的逻辑就够了   SingleFlight interface {     Do(key string, fn func() (interface{}, error)) (interface{}, error)     DoEx(key string, fn func() (interface{}, error)) (interface{}, bool, error)   }   // 定义 call 的结构   call struct {     wg  sync.WaitGroup // 用于实现通过1个 call，其他 call 阻塞     val interface{}    // 表示 call 操作的返回结果     err error          // 表示 call 操作发生的错误   }   // 总控结构，实现 SingleFlight 接口   flightGroup struct {     calls map[string]*call // 不同的 call 对应不同的 key     lock  sync.Mutex       // 利用锁控制请求   } )</code></pre> <p>然后看最核心的<code>Do方法</code>做了什么事情：</p> <pre><code class="language-go">func (g *flightGroup) Do(key string, fn func() (interface{}, error)) (interface{}, error) {   c, done := g.createCall(key)   if done {     return c.val, c.err   }    g.makeCall(c, key, fn)   return c.val, c.err }</code></pre> <p>代码很简洁，利用<code>g.createCall(key)</code>对 key 发起 call 请求（其实就是做一件事情），如果此时已经有其他协程已经在发起 call 请求就阻塞住（done 为 true 的情况），等待拿到结果后直接返回。如果 done 是 false，说明当前协程是第一个发起 call 的协程，那么就执行<code>g.makeCall(c, key, fn)</code>真正地发起 call 请求（此后的其他协程就阻塞在了<code>g.createCall(key)</code>)。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/77b9472983d0d58eba3f95c50a841975.jpg" alt="通过 SingleFlight 模式学习 Go 并发编程"></p> <p>从上图可知，其实关键就两步：</p> <ol> <li>判断是第一个请求的协程（利用map）</li> <li>阻塞住其他所有协程（利用 sync.WaitGroup）</li> </ol> <p>来看下<code>g.createCall(key)</code>如何实现的：</p> <pre><code class="language-go">func (g *flightGroup) createCall(key string) (c *call, done bool) {   g.lock.Lock()   if c, ok := g.calls[key]; ok {     g.lock.Unlock()     c.wg.Wait()     return c, true   }    c = new(call)   c.wg.Add(1)   g.calls[key] = c   g.lock.Unlock()    return c, false }</code></pre> <p>先看第一步：判断是第一个请求的协程（利用map）</p> <pre><code class="language-go">g.lock.Lock() if c, ok := g.calls[key]; ok {   g.lock.Unlock()   c.wg.Wait()   return c, true }</code></pre> <p>此处判断 map 中的 key 是否存在，如果已经存在，说明已经有其他协程在请求了，当前这个协程只需要等待，等待是利用了<code>sync.WaitGroup</code>的<code>Wait()</code>方法实现的，此处还是很巧妙的。<strong>要注意的是，map 在 Go 中是非并发安全的，所以需要加锁。</strong></p> <p>再看第二步：阻塞住其他所有协程（利用 sync.WaitGroup）</p> <pre><code class="language-go">c = new(call) c.wg.Add(1) g.calls[key] = c</code></pre> <p>因为是第一个发起 call 的协程，所以需要 new 这个 call，然后将<code>wg.Add(1)</code>，这样就对应了上面的<code>wg.Wait()</code>，阻塞剩下的协程。随后将 new 的 call 放入 map 中，注意此时只是完成了初始化，并没有真正去执行call请求，真正的处理逻辑在<code>g.makeCall(c, key, fn)</code>中。</p> <pre><code class="language-go">func (g *flightGroup) makeCall(c *call, key string, fn func() (interface{}, error)) {   defer func() {     g.lock.Lock()     delete(g.calls, key)     g.lock.Unlock()     c.wg.Done()   }()    c.val, c.err = fn() }</code></pre> <p>这个方法中做的事情很简单，就是执行了传递的匿名函数<code>fn()</code>（也就是真正call请求要做的事情）。最后处理收尾的事情（通过defer），也是分成两步：</p> <ol> <li>删除 map 中的 key，使得下次发起请求可以获取新的值。</li> <li>调用<code>wg.Done()</code>，让之前阻塞的协程全部获得结果并返回。</li> </ol> <p>至此，<code>SingleFlight</code> 的核心代码就解析完毕了，虽然代码不长，但是这个思想还是很棒的，可以在实际工作中借鉴。</p> <h2 id="总结">总结</h2> <ul> <li>map 非并发安全，记得加锁。</li> <li>巧用 sync.WaitGroup 去完成<code>需要阻塞控制协程</code>的应用场景。</li> <li>通过匿名函数 fn 去封装传递具体业务逻辑，在调用 fn 的上层函数中去完成统一的逻辑处理。</li> </ul> <h2 id="项目地址">项目地址</h2> <p>https://github.com/zeromicro/go-zero</p> <p>欢迎使用<code>go-zero</code> 并<strong>star</strong> 支持我们！</p> 			                </div>
                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-109122.htm">纯JS 全屏滚动 / 整屏翻页</a></p>
                                        <p>下一个：<a href="/news/article-109982.htm">动物医院的仪器设备是什么样的（动物医院诊疗系统）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-88444.htm" title="实现 ResponseBodyAdvice 定制化JSON 返回字段">实现 ResponseBodyAdvice 定制化JSON 返回字段</a></li>
                        <li class="py-2"><a href="/news/article-98103.htm" title="SpringCloud Feign整合Sentinel">SpringCloud Feign整合Sentinel</a></li>
                        <li class="py-2"><a href="/news/article-91544.htm" title="C++基础之C++中的输入输出">C++基础之C++中的输入输出</a></li>
                        <li class="py-2"><a href="/news/article-87689.htm" title="动物疫苗研发到生产的周期 动物疫苗研发到生产的周期是多久">动物疫苗研发到生产的周期 动物疫苗研发到生产的周期是多久</a></li>
                        <li class="py-2"><a href="/news/article-95900.htm" title="中国宠物用品生产基地在哪里有（宠物用品厂家哪个城市最多）">中国宠物用品生产基地在哪里有（宠物用品厂家哪个城市最多）</a></li>
                        <li class="py-2"><a href="/news/article-99560.htm" title="南京宠物狗领养地址在哪里啊（南京宠物狗领养地址在哪里啊电话）">南京宠物狗领养地址在哪里啊（南京宠物狗领养地址在哪里啊电话）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-24-node-share-links.htm" title="4月24日→18.6M/S|2025年最新免费节点Outline Node订阅链接地址">4月24日→18.6M/S|2025年最新免费节点Outline Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-5-2-node-share-links.htm" title="5月2日→21.6M/S|2025年最新免费节点Outline Node订阅链接地址">5月2日→21.6M/S|2025年最新免费节点Outline Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-13-node-share.htm" title="4月13日→22.5M/S|2025年最新免费节点Outline Node订阅链接地址">4月13日→22.5M/S|2025年最新免费节点Outline Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-10-node-share-links.htm" title="4月10日→21.4M/S|2025年最新免费节点Outline Node订阅链接地址">4月10日→21.4M/S|2025年最新免费节点Outline Node订阅链接地址</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">9</span> <a href="/date/2025-05/" title="2025-05 归档">2025-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">90</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!-- faq team section end -->
    <!-- blog section end -->
        <footer class="footer-section position-relative">
        <!-- coppy right satrt -->
        <div class="copy-right-section">
            <div class="container">
                <div class="row">
                    <div class="col-12">
                                            <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                        <p>
                            <a href="/">Outline Node免费机场订阅节点官网</a> 版权所有 Powered by WordPress
                        </p>
                    </div>
                </div>
            </div>
        </div>
        <!-- coppy right end -->
    </footer>
    <!-- Scripts -->
    <script src="/assets/website/js/frontend/outlinenode/vendor/vendor.min.js"></script>
    <script src="/assets/website/js/frontend/outlinenode/plugins/plugins.min.js"></script>
    <script src="/assets/website/js/frontend/outlinenode/ajax-contact.js"></script>
    <script src="/assets/website/js/frontend/outlinenode/plugins/aos.js"></script>
    <script src="/assets/website/js/frontend/outlinenode/plugins/waypoints.js"></script>
    <script src="/assets/website/js/frontend/outlinenode/plugins/jquery.selectric.min.js"></script>
    <script src="/assets/website/js/frontend/outlinenode/main.min.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>