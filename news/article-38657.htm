<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://outlinenode.github.io/news/article-38657.htm" />
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Redis Cluster 集群搭建与扩容、缩容</title>
        <meta name="description" content="说明：仍然是伪集群，所有的Redis节点，都在一个服务器上，采用不同配置文件，不同端口的形式实现 前提：已经安装好了Redis，本文的redis的版本是redis-6.2.3 Redis的下载、安装参" />
        <link rel="icon" href="/assets/website/img/outlinenode/favicon.ico" type="image/x-icon"/>
    <!-- Favicon -->
    <link rel="stylesheet" href="/assets/website/css/outlinenode/vendor/icofont.min.css" />
    <link rel="stylesheet" href="/assets/website/css/outlinenode/plugins/animate.min.css" />
    <link rel="stylesheet" href="/assets/website/css/outlinenode/plugins/swiper-bundle.min.css" />
    <link rel="stylesheet" href="/assets/website/css/outlinenode/plugins/aos.css" />
    <link rel="stylesheet" href="/assets/website/css/outlinenode/plugins/selectric.css" />
    <link rel="stylesheet" href="/assets/website/css/outlinenode/style.css" />
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-S2WVKF223J"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-S2WVKF223J');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <header class="header">
        <div id="active-sticky" class="header-bottom">
            <div class="container">
                <div class="row align-items-center">
                    <div class="col">
                        <a href="/" class="brand-logo">
                                                        <span>Outline Node</span>
                                                    </a>
                    </div>
                    <div class="col-auto"><a class="btn btn-warning btn-hover-warning d-none d-sm-inline-block d-lg-none" href="#">Analyze Your Site <i class="icofont-arrow-right"></i></a>
                        <button type="button" class="btn btn-warning offcanvas-toggler" data-bs-toggle="modal" data-bs-target="#offcanvas-modal"><span class="line"></span><span class="line"></span><span class="line"></span></button>
                        <nav class="d-none d-lg-block">
                            <ul class="main-menu text-end">
                                                                <li class="main-menu-item"><a class="main-menu-link" href="/">首页</a></li>
                                                                <li class="main-menu-item"><a class="main-menu-link" href="/free-nodes/">免费节点</a></li>
                                                                <li class="main-menu-item"><a class="main-menu-link" href="/paid-subscribe/">推荐机场</a></li>
                                                                <li class="main-menu-item"><a class="main-menu-link" href="/news/">新闻资讯</a></li>
                                                                <li class="main-menu-item"><a class="main-menu-link" href="#">关于</a></li>
                                <li class="main-menu-item"><a class="main-menu-link" href="#">联系</a></li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <!-- bread crumb section start -->
    <section class="bread-crumb-section"><img class="shape shape1" src="/assets/website/img/outlinenode/bread/1.png" alt="images_not_found"><img class="shape shape2" src="/assets/website/img/outlinenode/bread/2.png" alt="images_not_found">
        <div class="container">
            <div class="row">
                <div class="col-12">
                    <h1 class="title text-center">Redis Cluster 集群搭建与扩容、缩容</h1>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb justify-content-center">
                            <li class="breadcrumb-item"><a href="/">首页</a></li>
                            <li class="breadcrumb-item"><a href="/news/">新闻资讯</a></li>
                            <li class="breadcrumb-item active" aria-current="page"><span>正文</span></li>
                        </ol>
                    </nav>
                </div>
            </div>
        </div>
    </section>
    <!-- bread crumb section end -->
    <!-- faq section start -->
    <section class="faq-section my-7"> <img src="/assets/website/img/outlinenode/faq/bg.png" alt="images-not_found" class="faq-bg" />
        <div class="container mb-7">
            <div class="row mb-n7">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                  				  				  				<blockquote> <p>说明：仍然是伪集群，所有的Redis节点，都在一个服务器上，采用不同配置文件，不同端口的形式实现</p> <p>前提：已经安装好了Redis，本文的redis的版本是<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://redis.io/download/"  target="_blank" rel="nofollow">redis-6.2.3</a></p> <p>Redis的下载、安装参考：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/rxx1005/p/15754565.html"  target="_blank" rel="nofollow">https://www.cnblogs.com/rxx1005/p/15754565.html</a></p> <p>文章中，Redis的安装目录为：/opt/app/redis/cluster/redis-6.2.3</p> <p>本文使用到的工具：</p> <ul> <li>SSH工具：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://mobaxterm.mobatek.net/download.html"  target="_blank" rel="nofollow">MobaXterm</a></li> <li>截图工具：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://faststone-capture.en.softonic.com/?ex=CAT-3508.0"  target="_blank" rel="nofollow">FSCapture</a></li> </ul> </blockquote> </h1> <p>redis cluster 的两种部署方式：</p> <ul> <li><a href="#fangfa1" rel="nofollow">方法1</a>：自定义配置文件安装，下文中的第一种，推荐使用此种办法</li> <li><a href="#fangfa2" rel="nofollow">方法2</a>：使用redis自带的cluster-create工具：不推荐使用，玩玩就行了</li> </ul> </h1> <h2 id="将常用脚本复制到bin目录下">将常用脚本复制到bin目录下</h2> <p>此步骤是个人习惯，可以不复制，后面使用命令时，直接使用src目录的即可。</p> <p>在编译Redis之后，会在 redis的<strong>src</strong>目录下生成一些脚本</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/06a767784e4d676700166ac0fbd006f6.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <p>我把这些常用脚本，使用<strong>cp</strong> 命令，拷贝到 resdis 根目录下的 bin 目录下（bin目录自己创建的）</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/6ca523563b538472abcf484ab4628b5b.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <hr/> <h2 id="安装rubyredis50之后不需要安装">安装ruby（redis5.0之后不需要安装）</h2> <p><strong>此处可跳过！！！</strong> 我使用的是redis-6.2.3，创建集群的时候，不再使用redis-trib.rb，而是用 redis-cli --cluster ，使用redis-cli<br /> --cluster创建集群，不需要安装ruby，下面是安装ruby的办法。</p> <blockquote> <p>注意：不要直接在Linux上执行 yum install ruby ，因为这样安装的ruby版本太低了</p> </blockquote> <p>低版本redis搭建 cluster集群，需要用到<strong>redis</strong>得<strong>src</strong>目录下的<strong>redis-trib.rb</strong> ，此脚本需要依赖 ruby 语言，现安装 ruby，在Linux上，直接使用<strong>wget</strong><br /> 命令，下载ruby安装包，也可以去官网下载之后，上传到Linux，官网：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://www.ruby-lang.org/en/downloads/"  target="_blank" rel="nofollow">http://www.ruby-lang.org/en/downloads/</a></p> <pre><code class="language-shell">[root@localhost conf]# wget https://cache.ruby-lang.org/pub/ruby/3.1/ruby-3.1.1.tar.gz</code></pre> <p><strong>解压，编译</strong>，编译约1~2分钟</p> <pre><code class="language-shell">[root@localhost app]# tar -zxvf ruby-3.1.1.tar.gz [root@localhost ruby-3.1.1]# cd ruby-3.1.1 [root@localhost ruby-3.1.1]# ./configure --prefix=/usr/local/ruby --enable-shared [root@localhost ruby-3.1.1]# make &amp; make install</code></pre> <p><strong>添加环境变量</strong>：</p> <p>编辑<strong>/etc/profile</strong> 文件，在文件末尾加上以下内容</p> <pre><code class="language-nginx">export RUBY_HOME=/usr/local/ruby export PATH=$RUBY_HOME/bin:$RUBY_HOME/lib:$PATH</code></pre> <p>保存，退出，重新加载文件</p> <pre><code class="language-shell">[root@localhost ~]# source /etc/profile</code></pre> <p>执行<strong>ruby -v</strong>，如果出现版本号，说明安装成功</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/dc248fd90d0204a0cd99ece92471fc1f.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <p>安装redis库</p> <pre><code class="language-shell">[root@localhost ruby-3.1.1]# gem install redis</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/84550cc2040ab95317358f5a61f5a8d8.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <p>至此，ruby就安装好了。</p> <hr/> </h1> <h2 id="配置">配置</h2> <p>在redis根目录下，创建一个conf文件夹，并在conf文件夹下，创建6个文件夹，用于存集群每个节点的配置文件、数据文件等</p> <pre><code class="language-shell">[root@localhost redis-6.2.3]# mkdir conf [root@localhost redis-6.2.3]# cd conf/ [root@localhost conf]# mkdir 7001 7002 7003 7004 7005 7006</code></pre> <p>在 7001 文件夹内，创建一个redis 的配置文件：</p> <pre><code class="language-shell">[root@localhost conf]# cd 7001/ [root@localhost 7001]# touch redis.conf</code></pre> <p>在 redis.conf 配置文件内，加入以下配置：</p> <pre><code class="language-nginx"># 将bind这一行注释掉，或者修改为0:0:0:0，这表示任意地址都可以连接此Redis服务  # bind 127.0.0.1   # 关闭保护模式，如果开启的话，外部客户端就连不上Redis  protected-mode no   # 配置redis的端口号(不同节点使用不同的端口号) port 7001   # 以守护进程运行（后台运行redis）  daemonize yes   # 服务启动后记录线程号的文件 pidfile "redis.pid"   # 日志 logfile "/opt/app/redis/cluster/redis-6.2.3/conf/7001/log.log"   # 数据库的个数  databases 16   # 设置数据保存到数据文件中的save规则,3600秒内修改1次key,进行一次磁盘保存操作  save 3600 1  save 300 100 save 60 10000   # 指定存储至本地数据库时是否压缩数据，默认是yes，redis采用LZF压缩，需要消耗CPU资源  rdbcompression yes   # 保存rdb文件时，是否对rdb文件进行校验 rdbchecksum yes   # 保存数据的文件名字  dbfilename "dump.rdb"  # 保存数据的目录，这个目录需要提前创建出来 dir "/opt/app/redis/cluster/redis-6.2.3/conf/7001"   # 是否开启aof持久化 appendonly yes   # aof文件名字  appendfilename "appendonly.aof"   # 集群配置文件,自动生成,不能人为维护  cluster-config-file "nodes.conf"   #开启cluster集群 cluster-enabled yes   #Redis集群节点超时时限 cluster-node-timeout 15000</code></pre> <p>将这个配置文件，复制5份到 7002 7003 7004 7005 7006 目录下</p> <pre><code class="language-shell">[root@localhost 7001]# cp redis.conf ../7002/ [root@localhost 7001]# cp redis.conf ../7003/ [root@localhost 7001]# cp redis.conf ../7004/ [root@localhost 7001]# cp redis.conf ../7005/ [root@localhost 7001]# cp redis.conf ../7006/</code></pre> <p>效果如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/62a44910384a1e2f6fa5bf266359ffe0.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <p>将每个目录下的配置文件里面，所有的7001，改成和目录一样的数字（替换所有配置文件中的7001），要替换三个位置。</p> <h2 id="启动-redis-服务">启动 redis 服务</h2> <pre><code class="language-shell">[root@localhost conf]# pwd /opt/app/redis/cluster/redis-6.2.3/conf [root@localhost conf]# ../bin/redis-server 7001/redis.conf [root@localhost conf]# ../bin/redis-server 7002/redis.conf [root@localhost conf]# ../bin/redis-server 7003/redis.conf [root@localhost conf]# ../bin/redis-server 7004/redis.conf [root@localhost conf]# ../bin/redis-server 7005/redis.conf [root@localhost conf]# ../bin/redis-server 7006/redis.conf</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/1629bb8ef197f9dd65b30f3ca2777a7e.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <h2 id="创建集群">创建集群</h2> <p>使用<strong>redis-cli --cluster</strong> 搭建集群，注意下面的IP，建议使用具体的IP，不要使用127.0.0.1，防止有坑</p> <pre><code class="language-shell">[root@localhost redis-6.2.3]# pwd /opt/app/redis/cluster/redis-6.2.3 [root@localhost redis-6.2.3]# ./bin/redis-cli  --cluster create 192.168.3.100:7001  192.168.3.100:7002  192.168.3.100:7003  192.168.3.100:7004  192.168.3.100:7005  192.168.3.100:7006  --cluster-replicas  1</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/4a996330589e34f064b295f73aadef74.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <h2 id="测试集群">测试集群</h2> <p>至此，集群就搭建好了，可以测试一下，连接集群，注意下面的命令，一定要带上<strong>-c</strong> ，表示以集群的模式访问：</p> <pre><code class="language-shell">[root@localhost redis-6.2.3]# ./bin/redis-cli -c -p 7001</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/3b8f10f355cb8d95e82f2e01fd0fb2f0.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <p>如果集群中，其中一个节点挂掉，从节点会自动变为主节点，若原主节点重连，会自动变为从节点</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/f4e03c7f17a7e7c82a9e66868e51e848.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <p>关闭集群办法：</p> <pre><code class="language-shell">[root@localhost bin]# pwd /opt/app/redis/cluster/redis-6.2.3/bin [root@localhost bin]# ./redis-cli -c -p 7001 shutdown [root@localhost bin]# ./redis-cli -c -p 7002 shutdown [root@localhost bin]# ./redis-cli -c -p 7003 shutdown [root@localhost bin]# ./redis-cli -c -p 7004 shutdown [root@localhost bin]# ./redis-cli -c -p 7005 shutdown [root@localhost bin]# ./redis-cli -c -p 7006 shutdown # 如果需要删除集群数据，看清楚当前位置 [root@localhost 7001]# pwd /opt/app/redis/cluster/redis-6.2.3/conf/7001 [root@localhost 7001]# rm -rf appendonly.aof dump.rdb log.log nodes.conf [root@localhost 7001]# cd ../7002/ ; rm -rf appendonly.aof dump.rdb log.log nodes.conf [root@localhost 7002]# cd ../7003/ ; rm -rf appendonly.aof dump.rdb log.log nodes.conf [root@localhost 7003]# cd ../7004/ ; rm -rf appendonly.aof dump.rdb log.log nodes.conf [root@localhost 7004]# cd ../7005/ ; rm -rf appendonly.aof dump.rdb log.log nodes.conf [root@localhost 7005]# cd ../7006/ ; rm -rf appendonly.aof dump.rdb log.log nodes.conf</code></pre> <blockquote> <p>PS：一开始，我用<strong>redis-trib.rb</strong>搭建集群，但报出警告说，<strong>redis-trib.rb已经不可用了</strong>，让使用<strong>redis-cli --cluster</strong>代替，下图的<strong>示例</strong>后面的命令，是已经帮助我替换好的命令<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/40173107fd214c57ddc2a6280956ab7d.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> </blockquote> </h1> <blockquote> <p>建议这块只做了解，实践中，使用上一种创建方式，其实这块创建集群，使用的仍然是<strong>redis-cli --cluster</strong>创建</p> </blockquote> <h2 id="脚本位置">脚本位置</h2> <p>在redis的<strong>/redis-6.2.3/utils/create-cluster</strong>目录下，有一个<strong>create-cluster</strong>脚本，可以使用此脚本创建集群</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/daa5b54ae6bd1e5a62f63e8eca706a89.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <h2 id="脚本配置">脚本配置</h2> <p>先编辑一下这个脚本，打开之后，可能需要修改前面几行配置</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/889a77aec23184c7e54a8f0cb33a0277.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <blockquote> <p>注意：集群节点的数量，必须大于6个，否则启动集群，会有如下错误：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/768fe401612693a65ba84cfeb3156341.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> </blockquote> <h2 id="启动集群">启动集群</h2> <p>启动redis服务，创建集群</p> <pre><code class="language-shell">[root@localhost create-cluster]# ./create-cluster start Starting 30001 Starting 30002 Starting 30003 Starting 30004 Starting 30005 Starting 30006 [root@localhost create-cluster]# ./create-cluster create</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/b37b2dae0a43b58a168bb764608eb746.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <p>启动之后，会在create-cluster脚本的位置，自动生成配置文件、数据文件、log文件等</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/9cb5a9de7789ab715066adb27c81edab.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <h2 id="测试集群-1">测试集群</h2> <p>仍然使用<strong>redis-cli -c</strong></p> <pre><code class="language-shell">[root@localhost redis-6.2.3]# ./bin/redis-cli -c -p 30001</code></pre> <p>至此，集群搭建结束。</p> <hr/> </h1> <blockquote> <p>集群扩容时，先增加主节点，再给新增的主节点分配槽，然后增加从节点</p> </blockquote> <p>在第一种集群的基础上，再增加两个节点，7007和7008，7007作为新增的主节点，7008作为7007的从节点。</p> <h2 id="添加配置">添加配置</h2> <p>把7001的配置文件，复制给7007和7008，并把配置文件里面的7001，全部替换成7007和7008。</p> <pre><code class="language-shell">[root@localhost conf]# pwd /opt/app/redis/cluster/redis-6.2.3/conf [root@localhost conf]# mkdir 7007 7008 [root@localhost conf]# cp 7001/redis.conf 7007/redis.conf [root@localhost conf]# cp 7001/redis.conf 7008/redis.conf [root@localhost conf]# ll 总用量 0 drwxr-xr-x. 2 root root 112 3月  27 12:01 7001 drwxr-xr-x. 2 root root 112 3月  27 12:01 7002 drwxr-xr-x. 2 root root 112 3月  27 12:01 7003 drwxr-xr-x. 2 root root 112 3月  27 12:01 7004 drwxr-xr-x. 2 root root 112 3月  27 12:01 7005 drwxr-xr-x. 2 root root 112 3月  27 12:01 7006 drwxr-xr-x. 2 root root  24 3月  27 12:05 7007 drwxr-xr-x. 2 root root  24 3月  27 12:05 7008</code></pre> <h2 id="增加主节点">增加主节点</h2> <p>扩容时，先增加主节点，再增加从节点</p> <h3 id="先启动7007节点">先启动7007节点</h3> <pre><code class="language-shell">[root@localhost redis-6.2.3]# pwd /opt/app/redis/cluster/redis-6.2.3 [root@localhost redis-6.2.3]# ./bin/redis-server conf/7007/redis.conf</code></pre> <p>增加主节点之前的集群状态</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/8ebe4b266b54b8ebb9313bb2bc0c8293.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <h3 id="向集群中增加主节点">向集群中增加主节点</h3> <pre><code class="language-shell">[root@localhost redis-6.2.3]# ./bin/redis-cli --cluster add-node 192.168.3.100:7007 192.168.3.100:7001</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/c45b423813af674fd223494bcfde7aa4.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <h3 id="查看集群状态">查看集群状态</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/dab66b3711fe56147ac17cb7660a8ce0.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <p>新增的节点，已成为集群中的主节点，但还没有给新主节点分配槽，0~16383（共16384个）这个范围的槽，全部被分配在了原来的三个主节点上，即使现在向集群中set数据，数据仍会被分配到原来的三个主节点上。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/19dbff206746bc91002be75bd60f0a9d.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <h3 id="分配槽slot">分配槽（slot）</h3> <p>现在，为新增的主节点分配槽，执行以下命令：</p> <pre><code class="language-shell">[root@localhost redis-6.2.3]# ./bin/redis-cli --cluster reshard 192.168.3.100:7001</code></pre> <p>此时会询问给新增master节点分配多少个槽，总共16384个，平均分配给4个主节点，每个节点分配4096，就输入4096</p> <p>然后询问接收节点的ID，输入新增的master节点的ID</p> <p>然后输入从哪几个节点来分，输入前三个主节点的ID，最后输入done表示结束。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/fbc92ace0e052f29c6009ec622406b35.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <p>输入yes开始数据迁移，等待结束</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/a441a24b48b2063fb6459452c648fa2d.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <h3 id="检查">检查</h3> <p>使用redis-cli --cluster check检查当前的集群状态，看槽是否已经分配完成</p> <pre><code class="language-shell">[root@localhost redis-6.2.3]# ./bin/redis-cli --cluster check 192.168.3.100:7001</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/66acee2063f693666e5a32e9a7d0b5e6.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <h3 id="测试">测试</h3> <p>查看下面的数据所在的槽和所属的redis服务端口</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/550f3d96b0ee113c325b362bfa2fcf41.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <p>至此，集群增加主节点结束。</p> <h2 id="增加从节点">增加从节点</h2> <p>增加从节点有两个步骤：1、将新增节点7008加入到集群中，暂时作为主节点。2、将新增的节点7008挂接到从节点7007上去。</p> <h3 id="启动新增的从节点">启动新增的从节点</h3> <pre><code class="language-shell">[root@localhost redis-6.2.3]# pwd /opt/app/redis/cluster/redis-6.2.3 [root@localhost redis-6.2.3]# ./bin/redis-server  conf/7008/redis.conf</code></pre> <h3 id="将节点加入到集群">将节点加入到集群</h3> <p>将新增的节点7008，加入到集群中，暂时作为主节点</p> <pre><code class="language-shell">[root@localhost redis-6.2.3]# pwd /opt/app/redis/cluster/redis-6.2.3 [root@localhost redis-6.2.3]# ./bin/redis-cli --cluster add-node 192.168.3.100:7008 192.168.3.100:7001</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/346814be20d477b60ee9cb2895b18d90.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <h3 id="挂接节点">挂接节点</h3> <p>将新节点7008，挂接到集群的7007主节点上，作为其从节点。在7008的客户端里面执行以下命令，最后面的ID是主节点7007的ID：</p> <pre><code class="language-shell">127.0.0.1:7008&gt; cluster replicate 1d708c5042d53b6bc1e855ea41755782b6692e1a</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/07542d064013a880c5b0ad24c38c714a.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <h3 id="查看状态测试">查看状态、测试</h3> <p>此时查看状态，7008已经成为7007的从节点，而且7008上的数据，和7007上的数据完全一样</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/6fd7777c1377ff81de23090d2cc30176.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <p>至此，集群扩容已完成。</p> <hr/> </h1> <blockquote> <p>缩容的步骤，正好与扩容相反，先删除从节点，再将主节点的槽，分配给其他三个主节点的其中一个，然后删除主节点</p> </blockquote> <h2 id="删除从节点">删除从节点</h2> <p>以删除7008从节点为例，使用<strong>redis-cli --cluster del-node</strong>命令删除从节点，<strong>192.168.3.100:7001 表示要从哪个集群删除</strong>（注意这并不是要删除的节点IP和端口），后面的<strong>cd26feeb271c1260ec134d85dcdeaf4c72bfc3ad才表示要删除的节点ID</strong>，也就是7008的ID</p> <pre><code class="language-shell">[root@localhost redis-6.2.3]# ./bin/redis-cli --cluster del-node 192.168.3.100:7001 cd26feeb271c1260ec134d85dcdeaf4c72bfc3ad &gt;&gt;&gt; Removing node cd26feeb271c1260ec134d85dcdeaf4c72bfc3ad from cluster 192.168.3.100:7001 &gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster... &gt;&gt;&gt; Sending CLUSTER RESET SOFT to the deleted node.</code></pre> <p>此时再查看集群状态，集群中已经没有7008节点了，但是7008的服务还启动着，现在就可以关掉了</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/26b3fc95fd24704430e30f215d9f496f.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <p>关掉7008服务</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/6f931bbff69aac82626c7d865f3983cd.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <h2 id="将要删除的主节点的槽分配给其他主节点">将要删除的主节点的槽分配给其他主节点</h2> <p>在删除集群中的主节点7007之前，需要先将其槽分给其他的三个主节点中的某一个，这里以分配给7001节点为例：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/70bf592368bc7971f6d61ea4718115ea.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/7abf7ded3d5b58ffd49c5e7342606719.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <h2 id="删除主节点">删除主节点</h2> <p>此时，7007上已经没有数据和槽了，可以从集群中删除7007节点了，删除方式和删除从节点一样，直接执行删除命令：</p> <pre><code class="language-shell">[root@localhost redis-6.2.3]# pwd /opt/app/redis/cluster/redis-6.2.3 [root@localhost redis-6.2.3]# ./bin/redis-cli --cluster del-node 192.168.3.100:7001 1d708c5042d53b6bc1e855ea41755782b6692e1a &gt;&gt;&gt; Removing node 1d708c5042d53b6bc1e855ea41755782b6692e1a from cluster 192.168.3.100:7001 &gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster... &gt;&gt;&gt; Sending CLUSTER RESET SOFT to the deleted node. [root@localhost redis-6.2.3]#</code></pre> <p>再查看集群状态，集群中已经没有7007节点了</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/c84165eb4bb6402cd856ca3c0c10edc3.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <p>再关闭7007服务即可：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/67660309687ea23564e12f0bd6916f07.jpg" alt="Redis Cluster 集群搭建与扩容、缩容"></p> <p>至此，redis集群缩容完成</p> <hr/> </h1> <h2 id="使用jedis连接redis">使用Jedis连接Redis</h2> <p>新建一个简单的maven项目，在pom文件中引入jedis依赖：</p> <pre><code class="language-xml">&lt;dependency&gt;     &lt;groupId&gt;redis.clients&lt;/groupId&gt;     &lt;artifactId&gt;jedis&lt;/artifactId&gt;     &lt;version&gt;4.1.1&lt;/version&gt; &lt;/dependency&gt;</code></pre> <p>测试：</p> <pre><code class="language-java">public class RedisClusterTest {     public static void main(String[] args) {         Set&lt;HostAndPort&gt; nodes = new HashSet();         //集群的所有节点         nodes.add(new HostAndPort("192.168.3.100", 7001));         nodes.add(new HostAndPort("192.168.3.100", 7002));         nodes.add(new HostAndPort("192.168.3.100", 7003));         nodes.add(new HostAndPort("192.168.3.100", 7004));         nodes.add(new HostAndPort("192.168.3.100", 7005));         nodes.add(new HostAndPort("192.168.3.100", 7006));         //JedisCluster客户端         JedisCluster jedisCluster = new JedisCluster(nodes);         //set值         jedisCluster.set("a", "a");         jedisCluster.set("b", "b");         jedisCluster.set("c", "c");         jedisCluster.set("d", "d");         //get值         System.out.println(jedisCluster.get("a"));         System.out.println(jedisCluster.get("b"));         System.out.println(jedisCluster.get("c"));         System.out.println(jedisCluster.get("d"));         //关闭jedisCluster         jedisCluster.close();     } }</code></pre> <h2 id="springboot项目连接redis">SpringBoot项目连接Redis</h2> <h3 id="加入依赖">加入依赖</h3> <p>新建一个SpringBoot项目，在项目中引入以下依赖：</p> <pre><code class="language-xml">&lt;!--        Spring web的依赖--&gt; &lt;dependency&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt;          &lt;!--        SpringBoot项目pom文件中，加入redis依赖--&gt; &lt;dependency&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;     &lt;version&gt;2.6.4&lt;/version&gt; &lt;/dependency&gt;          &lt;!--        test   --&gt; &lt;dependency&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-test&lt;/artifactId&gt;     &lt;version&gt;2.6.5&lt;/version&gt;     &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt;          &lt;!--        test   --&gt; &lt;dependency&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;     &lt;version&gt;RELEASE&lt;/version&gt;     &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt;          &lt;!--        fastjson,设置序列化--&gt; &lt;dependency&gt;     &lt;groupId&gt;com.alibaba&lt;/groupId&gt;     &lt;artifactId&gt;fastjson&lt;/artifactId&gt;     &lt;version&gt;1.2.79&lt;/version&gt; &lt;/dependency&gt;</code></pre> <h3 id="配置集群ip和端口">配置集群IP和端口</h3> <p>在application.properties配置文件中，加入集群的节点的配置信息（这里做了简化）</p> <pre><code class="language-properties">spring.redis.cluster.nodes=192.168.3.100:7001,192.168.3.100:7002,192.168.3.100:7003,192.168.3.100:7004,192.168.3.100:7005,192.168.3.100:7006</code></pre> <h3 id="配置redistemplate的序列化">配置RedisTemplate的序列化：</h3> <pre><code class="language-java">@Configuration public class RedisConfig {     @Bean     public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) {         RedisTemplate&lt;String, Object&gt; redisTemplate = new RedisTemplate();         redisTemplate.setConnectionFactory(redisConnectionFactory);          Jackson2JsonRedisSerializer&lt;Object&gt; jsonRedisSerializer = new Jackson2JsonRedisSerializer&lt;&gt;(Object.class);          ObjectMapper om = new ObjectMapper();         om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);         om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);         jsonRedisSerializer.setObjectMapper(om);          StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();          redisTemplate.setKeySerializer(stringRedisSerializer);         redisTemplate.setValueSerializer(jsonRedisSerializer);          redisTemplate.setHashKeySerializer(stringRedisSerializer);         redisTemplate.setHashValueSerializer(jsonRedisSerializer);          redisTemplate.afterPropertiesSet();         return redisTemplate;     } }</code></pre> <h3 id="测试-1">测试</h3> <pre><code class="language-java">@SpringBootTest(classes = RedisBootApplication.class) public class TestRedisClusterClient {      @Autowired     RedisTemplate&lt;String, Object&gt; redisTemplate;      @Test     public void test1() {         redisTemplate.opsForValue().set("a", 1);         redisTemplate.opsForValue().set("b", 2);         redisTemplate.opsForValue().set("c", 3);         redisTemplate.opsForValue().set("d", 4);         System.out.println(redisTemplate.opsForValue().get("a"));         System.out.println(redisTemplate.opsForValue().get("b"));         System.out.println(redisTemplate.opsForValue().get("c"));         System.out.println(redisTemplate.opsForValue().get("d"));     } }</code></pre> <p>在redis-cli中查看</p> <pre><code class="language-shell">127.0.0.1:7001&gt; get a -&gt; Redirected to slot [15495] located at 192.168.3.100:7003 "1" 192.168.3.100:7003&gt; get b -&gt; Redirected to slot [3300] located at 192.168.3.100:7001 "2" 192.168.3.100:7001&gt; get c -&gt; Redirected to slot [7365] located at 192.168.3.100:7002 "3" 192.168.3.100:7003&gt; get d -&gt; Redirected to slot [11298] located at 192.168.3.100:7001 "4"</code></pre> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-38653.htm">js制作简易秒表效果详细讲解、开始、暂停与结束（定时器制作和时间戳制作）</a></p>
                                        <p>下一个：<a href="/news/article-39135.htm">Python 查找算法_众里寻他千百度，蓦然回首那人却在灯火阑珊处（线性、二分，分块、插值查找算法)</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-11-17-free-high-speed-nodes.htm" title="11月17日→22M/S|2024年最新免费节点Outline Node订阅链接地址">11月17日→22M/S|2024年最新免费节点Outline Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-29993.htm" title="动物疫苗价格查询表图片大全及价格 动物疫苗价格查询表图片大全及价格">动物疫苗价格查询表图片大全及价格 动物疫苗价格查询表图片大全及价格</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-13-free-high-speed-nodes.htm" title="11月13日→19.2M/S|2024年最新免费节点Outline Node订阅链接地址">11月13日→19.2M/S|2024年最新免费节点Outline Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-30-free-node-subscribe.htm" title="12月30日→22.3M/S|2024年最新免费节点Outline Node订阅链接地址">12月30日→22.3M/S|2024年最新免费节点Outline Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-11-free-high-speed-nodes.htm" title="11月11日→22.2M/S|2024年最新免费节点Outline Node订阅链接地址">11月11日→22.2M/S|2024年最新免费节点Outline Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-35193.htm" title="重庆宠物狗领养公司电话（重庆宠物领养平台）">重庆宠物狗领养公司电话（重庆宠物领养平台）</a></li>
                        <li class="py-2"><a href="/news/article-28601.htm" title="第2章 图灵的计算王国">第2章 图灵的计算王国</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-1-node-share-links.htm" title="11月1日→21.9M/S|2024年最新免费节点Outline Node订阅链接地址">11月1日→21.9M/S|2024年最新免费节点Outline Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-5-free-subscribe-node.htm" title="1月5日→21.2M/S|2025年最新免费节点Outline Node订阅链接地址">1月5日→21.2M/S|2025年最新免费节点Outline Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-10-free-high-speed-nodes.htm" title="1月10日→22.7M/S|2025年最新免费节点Outline Node订阅链接地址">1月10日→22.7M/S|2025年最新免费节点Outline Node订阅链接地址</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">33</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">92</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!-- faq team section end -->
    <!-- blog section end -->
        <footer class="footer-section position-relative">
        <!-- coppy right satrt -->
        <div class="copy-right-section">
            <div class="container">
                <div class="row">
                    <div class="col-12">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                        <p>
                            <a href="/">Outline Node免费机场订阅节点官网</a> 版权所有 Powered by WordPress
                        </p>
                    </div>
                </div>
            </div>
        </div>
        <!-- coppy right end -->
    </footer>
    <!-- Scripts -->
    <script src="/assets/website/js/frontend/outlinenode/vendor/vendor.min.js"></script>
    <script src="/assets/website/js/frontend/outlinenode/plugins/plugins.min.js"></script>
    <script src="/assets/website/js/frontend/outlinenode/ajax-contact.js"></script>
    <script src="/assets/website/js/frontend/outlinenode/plugins/aos.js"></script>
    <script src="/assets/website/js/frontend/outlinenode/plugins/waypoints.js"></script>
    <script src="/assets/website/js/frontend/outlinenode/plugins/jquery.selectric.min.js"></script>
    <script src="/assets/website/js/frontend/outlinenode/main.min.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>